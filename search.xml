<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端性能优化方案</title>
      <link href="/2019/03/18/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/2019/03/18/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1>前端性能优化方案</h1><blockquote><ol><li>从用户角度而言，优化能够让页面加载得更快、对用户的操作响应得更及时，能够给用户提供更为友好的体验。 2. 从服务商角度而言，优化能够减少页面请求数、或者减小请求所占带宽，能够节省可观的资源。</li></ol></blockquote><ul><li>页面级别的优化HTTP请求数、脚本无阻塞加载、内敛脚本的位置优化</li><li>代码级别的优化Javascript的DOM操作优化，CSS选择符优化、图片优化以及HTML结构化的优化</li></ul><h2>页面级优化</h2><h3>减少HTTP的请求书</h3><p>一个完整的请求都需要经过DNS寻址、与服务器简历连接、发送数据、等待服务器响应以及接收数据这样一个漫长的过程</p><ol><li>从设计实现层面简化界面</li><li>合理设置HTTP缓存（恰当设置缓存可以大大减少http请求，被缓存资源的请求服务器是304响应，只有Header没有Body，可以节省带宽）</li><li>资源合并与压缩</li><li>CSS Sprites(合并CSS图片，减少请求数的有一个好办法)</li><li>Inline Image（使用 data: URL scheme的方式将图片嵌入到页面或 CSS中，如果不考虑资源管理上的问题的话，不失为一个好办法。如果是嵌入页面的话换来的是增大了页面的体积，而且无法利用浏览器缓存。使用在 CSS中的图片则更为理想一些。）</li><li>Lazy load Images(重点了解下，能在某种条件下或者页面刚加载时减少HTTP请求书)</li></ol><h3>将外部脚本置底（将脚本内容在页面信息内容加载后在加载）</h3><ol><li><p>浏览器在加载脚本完成之前，他后面的图片，样式以及其他脚本都处于阻塞阶段</p></li><li><p>异步执行 inline脚本(其实原理和上面是一样，保证脚本在页面内容后面加载。)（inline脚本在执行时，也页面处于空白阶段，将执行较长的inline脚本异步执行，将script元素的defer属性（脚本不能触碰文档内容改变），使用setTimeout）</p></li><li><p>将 CSS放在 HEAD中</p></li><li><p>减少不必要的 HTTP跳转（以目录形式访问的HTTP连接，是否带/, 可能隐藏了301跳转）</p></li></ol><h2>代码级优化</h2><h3>JavaScript</h3><ol><li><p>DOMDOM操作应该是脚本中最耗性能的一类操作，例如增加、修改、删除 DOM元素或者对 DOM集合进行操作。如果脚本中包含了大量的 DOM操作则需要注意以下几点：HTML Collection（HTML收集器，返回一个类数组内容集合，并不是一个静态内容，每次访问该集合都会触发这个查询然后更新查询结果）Reflow &amp; Repaint</p></li><li><p>慎用 with</p></li></ol><p><code>with(obj){ p = 1}; 代码块的行为实际上是修改了代码块中的 执行环境 ，将obj放在了其作用域链的最前端，在 with代码块中访问非局部变量是都是先从 obj上开始查找，如果没有再依次按作用域链向上查找，因此使用 with相当于增加了作用域链长度。而每次查找作用域链都是要消耗时间的，过长的作用域链会导致查找性能下降。</code></p><ol start="3"><li>避免使用evel</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript重温OOP之面向对象</title>
      <link href="/2019/03/14/Javascript%E9%87%8D%E6%B8%A9OOP%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/03/14/Javascript%E9%87%8D%E6%B8%A9OOP%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。——维基百科</p></blockquote><p>一般面向对象包含：继承、封装、多态、抽象</p><p>&lt;!-- more --&gt;</p><h2>对象形式的继承</h2><h3>浅拷贝</h3><p>var Person = {name: 'allin',age: 18,address: {home: 'home',office: 'office',}sclools: ['x','z'],};</p><p>var programer = {language: 'js',};</p><p>function extend(p, c){var c = c || {};for( var prop in p){c[prop] = p[prop];}}extend(Person, programer);programer.name;  // allinprogramer.address.home;  // homeprogramer.address.home = 'house';  //housePerson.address.home;  // house</p><h3>深拷贝</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function extendDeeply(p, c)&#123;</span><br><span class="line">    var c = c || &#123;&#125;;</span><br><span class="line">    for (var prop in p)&#123;</span><br><span class="line">        if(typeof p[prop] === &quot;object&quot;)&#123;</span><br><span class="line">            c[prop] = (p[prop].constructor === Array)?[]:&#123;&#125;;</span><br><span class="line">            extendDeeply(p[prop], c[prop]);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            c[prop] = p[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考链接：<a href="https://segmentfault.com/a/1190000006125521" target="_blank" rel="noopener">Javascript重温OOP之面向对象</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>少年将通过学习 React 得知键盘的声音</title>
      <link href="/2019/03/14/%E5%B0%91%E5%B9%B4%E5%B0%86%E9%80%9A%E8%BF%87%E5%AD%A6%E4%B9%A0-React-%E5%BE%97%E7%9F%A5%E9%94%AE%E7%9B%98%E7%9A%84%E5%A3%B0%E9%9F%B3/"/>
      <url>/2019/03/14/%E5%B0%91%E5%B9%B4%E5%B0%86%E9%80%9A%E8%BF%87%E5%AD%A6%E4%B9%A0-React-%E5%BE%97%E7%9F%A5%E9%94%AE%E7%9B%98%E7%9A%84%E5%A3%B0%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>假设我们要封装一个业务相关的 Modal ，我们不妨封装成一个函数，而不是一个组件。因为组件需要一个 state 来维护他是否显示。&lt;!-- more --&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import Modal from &apos;path/to/modal&apos;</span><br><span class="line"></span><br><span class="line">export default function BusinessModal() &#123;</span><br><span class="line">  const div = document.createElement(&apos;div&apos;)</span><br><span class="line">  document.body.append(div)</span><br><span class="line"></span><br><span class="line">  function close() &#123;</span><br><span class="line">    ReactDOM.unmountComponentAtNode(div)</span><br><span class="line">    if (div &amp;&amp; div.parentNode) &#123;</span><br><span class="line">      div.parentNode.removeChild(div)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function render() &#123;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">      &lt;Modal onClose=&#123;close&#125;&gt;</span><br><span class="line">        &lt;div&gt;My Business Modal&lt;/div&gt;</span><br><span class="line">      &lt;/Modal&gt;,</span><br><span class="line">      div</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    close</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
